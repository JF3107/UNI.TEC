
**** 1221 ****
===========================================================

【推进】








***********************************************************
++++++++（以下开始：知识/处理 分区）+++++++++++++++++++++++
***********************************************************
（语法区）
JS：
#  .unescape(str), 对通过escape()编码的字符串进行解码 [返回：str被解码的副本]

#  ** 超出部分"..."：str.substr(0,20)+"..."

#  Array slice(n,m)方法：①截取子数组 ②n必须m可省 ③nm含头不含尾

#  argvs.slice(1)[0],解析：（slice是返回【子数组】）
     slice(n,m)用于从数组中返回选定元素组成的数组[含头不含尾、只有n:从n起至尾]

#  .match(str/reg), ①字符串内检索指定值[参数:str]/②找到1个/多个正则匹配[参数:reg]

#  方法.apply(执行方法的对象, ArrArg)
   方法.call(执行方法的对象, arg1, arg2, ...)
     ** 使用构造函数原始方法 正确写法：Array.apply(null, btns).forEach(function(item){xxx})

#  转base64（canvas.todataURL法），步骤：
  ① 创建canvas  >>  var canvas=document.createElement("canvas")
  ② 设置canvas宽高（不设置.将使用默认）
  ③ 生成ctx  >>  var ctx=canvas.getContext("2d")
  ④ 作画  >>  ctx.drawImage(img,0,0,w,h) >>> img是图对象, 0.0表示"左.上.顶端起", 宽高.不写无所谓
     （作画完成后，ctx就没用了 >> canvas）
  ⑤ 生成base64 >> var b64=canvas.toDataURL("image/xxx")
     （最后的xxx是"扩展名"，可通过：img.src.substring(img.src.lastIndexOf(".")+1).toLowerCase()）
      -------
   以上步骤需要写在图片对象.onload函数之内，其外层：
   A  var img=new Image(); //创建一个空的Image对象( 脱离于DOM )
   B  img.src=url;   //这个url就是 我材料图片的那个url
   C  img.onload=function(){ 这里放：①-⑤ }  //需要等img onload了、才可进行canvas系
 【img-url跨域？】当然啦!! 自己起一个服务（nginx）/或者其他服务器 吧。

#  arguments.callee，用于递归.本函数名。
    函数内，arguments为内部对象.包含传入函数的所有参数。argument.callee代表函数名[!!就这么规定的..]。
      **  作用、消除紧耦合

#  .lastIndexOf("xxx"), 从后往前寻找指定字符串(找到第一个后、返回index、终止)

#  JS.移动端 开发的一些体会：
  ① JS在PC/Mobile都能跑，浏览器调试Mobile时、切换成"移动端"。即可。
  ② 使用xxx.addEventListener("touchstart"/"touchend",function(){})可监听"长按"
     **  其中touchstart/touchend是[ 按下-松开 ]的两个事件
     **  在监听回调中、第一行都会event.preventDefault();>>待了解【】
     **  如需对被监听对象操作，可event.target.xxx、比如event.target.innerHTML="yyy"

#  DOM.appendChild() >> JS原生的DOM操作：贴!   （注意和 JQ的append 区别!!）

#  window.location.replace(xxx)/.href=xxx 的区别：
  ①window.location.replace("uuu"), A->B->【C】、B-C段用replace、【回退】、退回A
  ②window.location.href=uuu, A->B->【C】、B-C段用href、【回退】、退回B

#  JS 同步、异步、单线程 related
    setTimeout和setInterval，可以改变JS执行顺序。它们通常在执行完所有JS代码后才执行。
    >>  即使没有设置超时值(setTimeout 值为0、1-2-setTimeout3-4-5)，也不能保证输出为"12345".
  ------
    JS的异步：①setTimeout/setInterval ②ajax
  ------
    JS是单线程的, 所以处理任务时产生"任务队列"概念。为解决队列中某些任务等待过久(比如IO[网络])、产生"同步"、"异步"：
    将需要等待的任务暂时挂起、处理其他任务 >> 待挂起任务得到反应[可以继续处理]时、再继续，叫"异步操作"。
    按任务队列顺序执行，叫"同步操作"。
    （执行栈[同步任务集中]、任务队列[异步任务回调结果.结果]。执行栈处理完，再来处理任务队列）

#  【ES6】Promise直用(.reje/reso)：返回一个新的Promise实例、其状态为[reje/reso]
const p = Promise.reject(xxx)
const p = Promise.resolve(yyy)
（后续： p.then() >> 作reje/reso处理）

#  try/catch >> 用来定义/处置异常；throw eeee >> 用来抛出异常

#  export default >>>> export一个名为default的变量，import时.可以随意为此输出取名。
（Vue中经常看到、但它是ES6语法）
注意两种用法的对应：
① export default xxxx >> import iiii from "uuuu" >>> 用了default.匿名输出1个!
② export xxxx  >>  import {iiii} from "uuuu"    >>> 普通export.引入(import)时用{}接







HTML：
#  <meta>的"viewport"属性->【视口】：（死记加硬背）
     <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">

#  <i>里的"十六进制icon"，例如：content: '\e816';(编辑icon)。

#  <!DOCTYPE html>，是html5标准网页声明。其作用/重要性：
  ☆ 声明文档的解析类型、避免B的怪异模式






CSS：
#  rem，CSS3新增的一个相对单位。仅相对与HTML根元素的字体大小（em是相对于父元素的字体大小）

#  transition： ①property②duration③transition-function④delay
     ①属性-transition-property：none(无[默认]),all(全部属性),具体名(多项.则以逗号分隔)
     ②持续-transition-duration：0[默认]，具体秒(s)/毫秒(ms)
     ③变化-transition-timing-function：ease(逐渐变慢),linear(匀速),ease-in(加速),ease-out(减速),ease-in-out(加速-减速)
     ④延迟-transition-delay：0[默认]，具体秒(s)/毫秒(ms)
   （支持各浏览器差异。-moz-transition, -webkit-transition, -o-transition）
    >>>> 举例：(hover上去，宽度2秒内增至300px)
      div{
          width:100px
          transition: width 2s
      }
      div:hover{
          width:300px
      }
    ** transition：cubic-bezier(<x1>,<y1>,<x2>,<y2>) 贝塞尔曲线：P0(0,0).P3(1,1)不变\P1(x1,y1).P2(x2,y2)改变以生成【速度曲线】





JQ：
#  $(function(){}); 就是 $(document).ready(function(){}); >>>> DOM加载完毕后执行
----------------（0104）-----------------
#  .eq(index),  对目标元素遍历、取索引为index的元素

#  .show/hide(), 显示/隐藏

#  .find('xxxx')，查找

#  .offset()/offset({top:x, left:y}) 返回/设置 偏移量

#  .click()，click事件.回调

#  jQueryAPI使用：
     ①串联：$X.aaa().bbb()
     ②对象+动作：aaa($X, yyy) =>这里$X是JQ对象(执行aaa动作的对象，yyy是aaa()方法需要的参数)，举例：
       $X.click(e){ rotate(e.target, 180) }, 让被点击的目标[DOM对象]旋转180°

#  .rotate() 旋转

#  .next(), 选择相邻元素[next 下一个]

#  .trigger()，触发被选元素的指定事件类型

#  对于移动端click事件、tap事件：
     ①click：移动WEB端，click会有200-300ms延迟
     ②tap：移动WEB端，取代click事件。（无延迟）

#  document.querySelect("S") >> 用JQ选择器.用查询的方法获取元素。

#  $JQ.append() >> JQuery的DOM操作：贴!   （注意和 JS的appendChild 区别!!）

#  fullPage.js是jQuery的插件（全称: jquery.fullPage.js）,运用于网页"块.移"布局。参考 >> http://www.dowebok.com/77.html

#  .css("样式.名","样式.值");  << jQuery设置样式

#  jQuery用来 制造\安装 DOM：
  **  jquery操作DOM[创建/插入]：
  ①var e = $('<E>xxx</E>')            创建
  ②$X.append/prepend/after/before(e)  插入后/插入前/后/前

#  $.ajax()中，一般获取JSON字符串。用：dataType: "json", >>>> 以获取JSON对象

#  JQ获取/赋值<img>的src：
   ① $("#imgId")[0].src;
   ② $("#imgId").attr('src',path); 





RG：
# //i[i.gnore 不区分大小写],  //g[g.lobal 全局匹配]  >> //ig.不区分大小写+全局匹配，//m.ore-多行匹配，...






URL：
# URL传参: xxxx?yyy=zzz&aaa=bbb >> "&"后是第二参






WebStorage：
# WS->LocalStorage/SessionStorage（缓存）=> F12查看"application"






计算机：
#  获取本机IP：
     方法①=>cmd >> ipconfig/all >> 第三组:IPv4地址 x.x.x.x(首选) 【这个就是IP】
     方法②=>左下"打开:网络和共享中心" >> 访问类型-连接:点击-跳出弹窗:(无线)网络连接状态 >> 点击:详细信息 >> IPv4地址

#  nginx，一个服务。
     其指定开放目录（该目录还可在nginx目录外）才能被访问到。
       -----
     需要在nginx/nginx.conf中配置。
    **  配置关键：listen(监听端口), root(开放区域[目录])

#  关于页面加载静态资源[img/js/css  重点:img]
  ①如果你在本地使用：直接相对定位
  ②如果是在生产使用：需要结合生产上.实际的路径名、预先设置!!
    （比如，"resource/images/..."）




【MU】
#  东航旅客名存储格式： 姓/名 中间名（fir/las middle）







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%（1129+，B2CC网站代码）%%%%%%%%%%%%%%%%%%%
（工作主线）
【破案...】
#  【破案-1227.15】rem 可改变字体/HTML大小、（M站）一般会把参照设在<html>  << （font-size:xx px）
----------
<html>会被改。因为>>自适应脚本!!。基于clientWidth。resize代码如下：
function resize() {
    window.t = +new Date();
    var clientWidth = document.documentElement.clientWidth;
    if (!clientWidth) return;
    document.documentElement.style.fontSize = 20 * (clientWidth / 320) + 'px';
}




【Skills/项目机能】
#  关于地址：
     ① localhost:80/127.0.0.1:80打开页面，无法改语言[比如: 台湾] >>>> 需要用hosts进行映射设置
     ② 映射设置[最好用"替换"的办法]，** 127.0.0.1 dev.ceair,com( dev.ceair.com映射127.0.0.1 ) ** 
         使用：直接输入dev.ceair.com, 会自动映射 127.0.0.1
     ③ 台湾页面，请手动输入(而不是页面按钮切换)：devtw.ceair.com/hk  ** 映射详情.请参见 hosts文件/逻辑参见nginx.conf文件
         【注意】：请先编译，编译方法参见 gruntFile.js L1-8注释行:命令 >> 编译命令【grunt dev -c:TW[大小写不敏感]】
     ④ 生产环境、开发环境，后端连接信息/设置，在nginx.conf（nginx-conf目录内）中设置。L146+，搜"测试" or "生产"
         **** 用"#"注释 测试/开发、删"#"打开 开发/测试
     ⑤ 区别：de.ceair.com生产环境-德 / devde.ceair.com开发环境-德
         **** hosts文件中能看到18个环境[映射]，dev开头的>>英语(US), devxx开头的>>其他语种




【B2CC网站.URL】
#  B2CC项目，不用路由跳转、而是直接以html文件定位。这些html、就是public下各locale目录下的html：
    >>>> 以us(locale:美国)分析：us下是语言目录zh(lan:简体中文)、en(lan:英语)。zh/en是各自的htmls


#  B2CC项目-url分析，http://dev.ceair.com/en/check-in.html：
    ①dev/devde/devtw 选择locale包(/目录)=> us/de/tw
    ②/zh或/en 就是locale目录下的lan包(/目录)=> zh/en
    ③xxxx.html就是各lan包(/目录)下的html文件/网页




【B2CC网站.代码】
**  gruntFile.js，代码解析：（基于NJS）
     其中share出的是runGrunt的方法，runGrunt方法接受"grunt"[由安装提供]注入、主方法grunt.initConfig。
     --------------
     对gruntFile准备区的解析（L10-L26）：
       process        一个Object（里面有各argv属性）
       process.argv   ①C:\dev\nodejs\node.exe,②C:\dev\nodejs\node_modules\grunt-cli\bin\grunt,③dev
       argvs          process.argv.slice(2)，取上面第三个: dev
       env            下面会用switch赋值（production/dev/test）
       errorTag       初始值false、后续可能重新赋值
       version        当前毫秒数.时间戳
       siteArgv       undefined!!!  argvs.slice(1)[0] => dev，不是数组不存在第二个元素.
       siteIIFE       l-1，因为是undefined 所以temp是[]，
                      l-2，因为temp是[],temp.length是0 => !!!认为是"假值"、所以进"冒号后" => site此时是dftSite数组
                      l-3，if语句，argvs是dev，这里重新给site赋值，为dev
                   >>>> 所以 site最终是 dev、返回
     ---------------
     对gruntFile剩余部分的解析（L27+）：
       concat->理解为"连接"的意思，在代码中concat是把所有的引用/工具js、【拼接】成一个js文件
       >>> 而cms[ cms.config.js ]就是针对(工具)代码系拼接聚合的配置文件


**  webpack.conf.js，代码解析：
     options中，default下output[输出]：去往public/system/assets/scripts、生成[name].bundle.js
   （以上就是 B2CC的js代码流向：prebuild->public/sys/ass/scripts-xxx.bunld.js）


**  entry.js，代码解析：
     L3-L10、声明区：类似react、react-dom是模块引入；类似./xxx是文件夹读取（./config指config.js << 这个是例外）
     L12-L103、扩展区：对 Date、Number构造函数原型对象的.方法-扩展
     L104+，功能区：[配合config.js >> config-api] 生成 header/footer页面。
   （header  >>>  "/public/system/tempCMS/ceairheader-" + lang + ".html" <<语言针对）
   （footer  >>>  "/public/system/tempCMS/footer-" + lang + ".html" <<语言针对）



【B2CC网站.代码-通用】




【B2CC网站.代码-盾构(H-J)】




【ERROR池】





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
（术语）
#  checkin 值机[页面: 办登机牌]




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
（ 清洁区 ）








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
（ 问题池 ）







1129，了解一下：JQ $X.on('touchstart或touchend', ...)
1129，depart.on('webkitTransitionEnd'， 在这个事件 是什么事件?
1129，apply和call，其中apply中的参数this、argument是？
1129，了解一下：耦合度<<< pick一下
1129，了解一下：JQ $()
1121，了解一下：<meta>:charset; http-equiv, content; name(keywords/description)
1121，研究 e.preventDefault();
1121，研究 e.stopPropagation();
1121，进深Swiper  << JQ的
1121，进深eval() 
1116，后续结构化学习，Zepto
1116，后续结构化学习，JQuery
1116，后续pickup，JQ-webkitTransitionEnd-事件