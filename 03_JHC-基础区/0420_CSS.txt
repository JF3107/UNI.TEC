



CSS：
****************************************************************
<<<<<<<< 




<<<<<<<< 0802

#  元素子项偶数/奇数项选择器：nth-child(2n-1){...}奇 / nth-child(2n){...}偶

#  <span>折行，代码如下：
   （以下5条，实现span(div亦可) 换行）
  ##  word-break: normal;
  ##  width: 200px;
  ##  white-space: pre-wrap;
  ##  word-wrap: break-word;
  ##  overflow: hidden;
   （不设置line-height,会导致行距过大、不美观）		
  ##  line-height: 16px;

<<<<<<<< 0726

#  :nth-child(n)，看的是作为子组件的第n个。（注意：不从0开始、>> 1+）
 -> 如果作为子组件，有：<div /><span /><span /><span />；那么 span:nth-child(1)、是没有的！（因为第一个是div）

<<<<<<<< 0720

#  cursor属性，cursor:pointer的反面[ 去除手指 ]、是initial（而不是default/none/...）

#  @font-face，指定名为"xxx"的字体，并指定在哪里可以找到它的URL：
  ##  @font-face { 
  ##      font-family: xxxx;
  ##      src: url('----.ttf'), url('~~~~.eot');
  ##  }

<<<<<<<< 0628

#  CSS3 对元素旋转[180°] >> transform:rotate(180deg);

<<<<<<<< 0622

#  CSS3：CSS3的box-sizing属性：
  ① content-box 为元素设定的宽高仅包含内容（CSS2）
  ② border-box 为元素设定的宽高已经包含边框+内边距+内容
  ③ inherit 从父元素继承

#  CSS3：CSS3的弹性布局（Flex）：首先①display: flex，然后依次涉及“六大属性”：
  ② flex-direction  [ 容器内项目的排列方向 - row ]row左向右.row-reverse右向左.column上向下.column-reverse下向上 
  ③ flex-wrap   [ 容器内项目换行方式 -nowrap]nowrap不换行.wrap换行+第一行在上.wrap-reverse换行+第一行在下
  ④ flex-flow  [ 以上 flex-direction  +  flex-wrap 的简写方式 ]
  ⑤ justify-content  [ 项目在主轴上的对齐方式 ]flex-start主轴由左开始排列.flex-end主轴由右开始排列.center主轴左右居中.
          space-between主轴左右两端开始排列.space-around每个项目两侧的间隔相等.space-evenly每个项目左右两侧的间距相等
  ⑥ align-items  [ 项目在交叉轴上如何对齐 ]flex-start交轴由上开始排列.flex-end交轴由下开始排列.center交轴上下居中.
          baseline项目内文字底对齐(基线).stretch拉伸(默认拉满)-有height值时,拉伸到height的高度
  ⑦ align-content [ 定义了多根轴线的对齐方式（如项目只有一根轴线.则该属性不起作用）[so, 多行时...] ]flex-start. flex-end. center. 
          space-between. space-around. stretch
  不清楚的，看这个：https://blog.csdn.net/zyz00000000/article/details/82925070

<<<<<<<< 0621

#  transform:translateX/Y可能会导致"0621[ 透明化 ]"

<<<<<<<< 0605

#  用CSS实现“三角形”：
  长宽归零、左右border透明、下border有色[solid] => 箭头向上
  长宽归零、左右border透明、上border有色[solid] => 箭头向下
  长宽归零、上下border透明、左border有色[solid] => 箭头向右
  长宽归零、上下border透明、右border有色[solid] => 箭头向左
  代码如下（示例 \ 箭头向上）：
 **   width:0;
 **   height:0;
 **   border-right:50px solid transparent;
 **   border-left:50px solid transparent;
 **   border-bottom:50px solid red;

#  box阴影实现：（box-shadow）
  >>  box-shadow: h-shadow水平阴影 v-shadow垂直阴影 blur模糊 spread阴影尺寸 color色 inset[改内部阴影/默认:外部阴影];
   （注意：前四个参数，全部用px；最后一个inset一般不用；所以总共5各参数[ 4个px、1个色 ]）

#  实现文本溢出时省略号[ 单行 ]：（实现代码如下）
 **   overflow: hidden;
 **   text-overflow:ellipsis;

<<<<<<<< 0517

#  去除"无序列表"的[行首符号]：<ul style="list-style:none;">

<<<<<<<< 0510

#  max-height:xxx与overflow:auto配合使用，当高度超过max-height值自动出现垂直滚动条

#  （overflow针对的，不仅仅是水平向、也可以是垂直向）

#  > 子选择器[父子、不隔代]；+ 相邻选择器[ 同级.相邻\紧接(兄弟) ]；~ 匹配选择器[之后-所有-同级的x元素]

#  0510，新增认知以下属性：
  overflow  >>  规定.当内容溢出元素框时,?①[默认visible]那就溢出②[hidden]被修剪③[scroll]修剪but滚动条④[auto]如果被修剪则滚动条⑤[inherit]继承
  box-sizing  >>  ①content-box[C2]宽高即纯宽高(不含内边距+边框)②border-box[C3]宽高含有内边距和边框【★】两个borderBox的div.w50%>>并排
  max-height  >>  指定段落最大高度（请与overflow-auto配合使用）
  display  >>  元素应该生成的框的类型（参见 http://www.w3school.com.cn/cssref/pr_class_display.asp ::: none\block\inline\inline-block\...）
  line-height（单.数子->x倍行距）  >>  行间距[默认normal(设置合理行间距)①xpx②数字(x倍行距)③%基于当前字体尺寸的百分比行间距④inherit]
  vertical-align  >>  设置一个元素（相对于父元素）的垂直对齐方式[默认baseline放置在父元素基线①top②middle③bottom]
  text-align  >>  规定了元素中文本水平对齐方式[①right②center③left④justify两端对齐文本⑤inherit从父元素继承]
  outline  >>  绘制（位于边框外）轮廓线[outline-color色码、outline-style（none\dotted\dashed\...）、outline-width（thin\medium\thick\xpx）]
  visibility  >>  设置元素是否可见[①默认visible可见②hidden③collapse表格中使用以删除一行\一列④inherit]
  text-decoration  >>  文本修饰线[默认none没线\underline下划线\line-through删除线\overline上划线\blink闪烁线\inherit]
  word-wrap  >>  允许长单词\url换至下一行[ normal不换行(仅在断字点换行)、break-word内部换行 ]

<<<<<<<< 0430

#  如何解决：浮动div对父级元素的影响（父级元素高度丢失），最佳方案：
>>  对父元素使用 :after 伪元素选择器，如下：
.father:after {
  content: "";
  height: 0;
  visibility: hidden; // visibility属性: 元素是否可见（默认visible. hidden. collapse. inherit）
  display: block;
  clear: both;
} （content、height、visibility、display、clear 一共五项）


<<<<<<<< 0426

#  选择器+
A, B {....}  >> 并列选择器
A B {....}  >> 后代选择器

#  垂直居中[ 前提: <div><p>文字</p></div> ]
    p>>padding: 50% 0


<<<<<<<<pre 0420

#  rem，CSS3新增的一个相对单位。仅相对与HTML根元素的字体大小（em是相对于父元素的字体大小）

#  transition： ①property②duration③transition-function④delay
     ①属性-transition-property：none(无[默认]),all(全部属性),具体名(多项.则以逗号分隔)
     ②持续-transition-duration：0[默认]，具体秒(s)/毫秒(ms)
     ③变化-transition-timing-function：ease(逐渐变慢),linear(匀速),ease-in(加速),ease-out(减速),ease-in-out(加速-减速)
     ④延迟-transition-delay：0[默认]，具体秒(s)/毫秒(ms)
   （支持各浏览器差异。-moz-transition, -webkit-transition, -o-transition）
    >>>> 举例：(hover上去，宽度2秒内增至300px)
      div{
          width:100px
          transition: width 2s
      }
      div:hover{
          width:300px
      }
    ** transition：cubic-bezier(<x1>,<y1>,<x2>,<y2>) 贝塞尔曲线：P0(0,0).P3(1,1)不变\P1(x1,y1).P2(x2,y2)改变以生成【速度曲线】