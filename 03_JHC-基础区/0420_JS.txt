



JS：
****************************************************************
<<<<<<<< 




<<<<<<<< 0921

#  如何向正则表达式嵌入变量？
  - * 用正则构造函数 >>>> new RegExp('xxx'+变量+'yyy', 'g') [ 第二个参数是'关键字', 如全局.g ]

#  如何替换字符串中关键字"红显"？
  - * 用 >>>> strHtml = 被操作字符串.replace(new RegExp(`[${替换关键字}]`,'g'), `<span style="color:red;">${替换关键字}</span>`)

#  截取字符串，用：slice() / subtring() / substr()

<<<<<<<< 0912

#  xxx.filter(...).map(...)，可以链式! 这个例子中map操作的、是filter后的结果
#  用for循环遍历对象： for(var key in item)用来循环js对象
#  用indexOf在数组中匹配特定元素：arr.indexOf(item)
#  用indexOf在字符串中匹配特定元素：大Str.indexOf(子str)

<<<<<<<< 0830

#  Date对象使用[ 给定毫秒数 >> 年年月月日日 时时:分分:秒秒 ]
 ## var date=new Date(毫秒数).Format("yyyy/MM/dd hh:mm:ss");

<<<<<<<< 0823

#  什么元素会被当成false（用在if里当[否定]筛选条件）：false, 0, '', null, undefined （只有这五个!!）
  * - 注意：空数组“{}”/空对象“[]”都被当成 true的! 

<<<<<<<< 0802

#  JS 从数组 - 获取子数组：
  -  arr.slice(n,m) n开始位置、m结束位置[不含]

#  JS split('xxx')以[xxx](由字符串)拆成一个数组、join('yyy')以[yyy](由数组)合并成一个字符串

<<<<<<<< 0719

#  字符串(数字)数组 互转 数字(数字)数组：（  用 x.map(String/Number)  ）
  -  S -> N：arrs.map( Number )
  -  N -> S：arrn.map( String )

#  取数字数组(数字/字符串)中的最大最小值：（  用Math.min/max.apply( null, arrsn )  ）
  -  Max  ->  Math.max.apply( null, arrsn )  -  取最大值
  -  Min  ->  Math.min.apply( null, arrsn )  -  取最小值
  -  注意：对于“字符串(数字)数组”、同样有效。

#  字符串操作：slice(n, m)  >>> 取子串[ 含n、不含m ]
#  如何在既有字符串[str]中插入字符->[newStr]？ >>> var newStr = str.slice(0,5)+'-x-'+str.slice(5); [helloworld -> hello-x-world]

#  不要在.map()里用return来作为外层函数的返回值。很可能最终外面只得到一个"undefined"  >>> 用【for循环】

#  Array使用indexOf() [ 从字符串构成的数组、搜对字符串，查[ 是否匹配 ] ] >>>  ["aaa", "bbb", "ccc"].indexOf("aaa")  >>>  结果: 0

<<<<<<<< 0712

#  str.charAt(index)，获取某字符串在指定index位置的字符[单个]

#  JSON.parse( xxxx ) - from JSON、反序列化（JSON -> JS object）
    JSON.stringify( xxxx ) - to JSON、序列化（JS object -> JSON）
 - 运用[ 常用套用 ]：JSON.parse(JSON.stringify(nationData))

#  Object.keys( oooo )，返回oooo全部(可枚举)属性[ key -> 对象返回key、字符串返回index ] - 以数组的方式

<<<<<<<< 0628

#  JS对象赋值、如何不影响到原对象？
  let a = {xxx};  let b = a;  这时b和a是共用一个对象的、a是b的"原对象"。
    -  所以，这样做：
  ① let a = {xxx}
  ② let b = Object.assign({}, a)  （"重新分配对象"）
（原因： JavaScript 中对象的赋值是默认【引用赋值】的，如果你想要 [ 复制赋值 ] ，则必须要“重新分配对象”）

#  JS去除字符串空白：
① replace法：
  -  去除全部空格  >>  str = str.replace(/\s*/g,"");
  -  去除两头空格  >>  str = str.replace(/^\s*|\s*$/g,"");
  -  去除左侧空格  >>  str = str.replace(/^\s*/,"");
  -  去除右侧空格  >>  str = str.replace(/(\s*$)/g,"");
② trim法：
  -  去除两头空格  >>  str.trim()
  -  去除左侧空格  >>  str.trimLeft()
  -  去除右侧空格  >>  str.trimRight()
③ JQuery - trim法（只能去除两头）
  -  去除两头空格  >>  $.trim(str)

#  数组合并[ 接合 ] - concat：
      arrA.concat( arrB, arrC, ... )   >>>  注意"括号"中、至少有一个数组

#  JS: 字符串 转 数字：
  -  Number("xxx")     xxx-num >> "hello"-NaN，""-0，"0011"-11，true-1
  -  parseInt("xxx")    默认按10进制：xxx-num >> "123hello"-123，""-NaN，"0xA"-10 (十六进制[ 0x- ]转)，"070"-1 (八进制[ 0- ]转)
  -    **  parseInt("xxx"，n)    “n”为 进制数，按进制转化
  -  parseFloat("xxx")    转为 浮点数（如果xxx可以转为整数，则转为整数）

#  var xxx = require('xxx')是CommonJS的写法，也就对应了ES6的import xxx from 'xxx';

#  你要什么? 就npm install x（--save）什么。然后import x from 'x'就行了。标准流程如下：
    ①npm install xxx --save ( 注册进包、随时可用[import] )
    ②使用时：
      import xxx from 'xxx';
      xxx(....);
    ③需要集中进utils的工具包时：
        --  Utils --
      import xxx from 'xxx';
      function yyy(ccc) {
        return xxx(ccc);
      }
      export {yyy};
        --  Compo --
      import {yyy} from 'yyy';
      let y = yyy(zzz);
      （★注意：compo里要拿到yyy的返回，utils里的yyy函数必须【return】）

#  如何将"二维数组"拆成"一维数组"：
  -  var arr1 = [[0, 1], [2, 3], [4, 5]];
  -  var arr2 = arr1.reduce(function (a, b) { return a.concat(b)} );

#  如何将"二维数组(字符串)"转为"字符串"
  -  `${[['f', 'a', 'n'],['z', 'h', 'e'],['m', 'i', 'n', 'g']]}` （ 也就是 [[x, x, x],[y, y, y],[z, z, z]]+'' ） =>  "fan, zhe, ming"

<<<<<<<< 0622

#  数组的shift/unshift/pop/push方法：
   Arr.shift()      对数组头部删除1个元素
   Arr.unshift()  对数组头部添加若干个元素
   Arr.pop()      对数组尾部删除1个元素
   Arr.push()     对数组尾部添加若干个元素

<<<<<<<< 0621

#  setTimeout/Interval-使用方法：（字符串方法(带括号)，直写function）
  ① setTimeout('xxx()', 1000)
  ② setTimeout(function() {  函数内容  }, 1000)
  ③ setInterval('xxx()', 1000)
  ④ setTimeout(function() {  函数内容  }, 1000)

<<<<<<<< 0531

#  按当地规则排序[ 比如:在中国..就是按照拼音顺序 ]  stringObject.localeCompare(target)  <<  s与t可以互换、都为字符串形式
      结果：-1前比后小[..自己比对一下相应位置]， 0前后一致，1前比后大

#  slice( start, end )，可用于①截取字符串 ②截取数

#  splice( index, howmany, +item1, item2, ... )，①从哪里[含]开始，②删几个?，③增加什么\多少

#  删除[1个]数组元素方法①：splice( index, 1 )，此方法执行后，索引 \ 总长 改变。彻底删除
#  删除[1个]数组元素方法②：delete arr[x]，此方法执行后，索引 \ 总长 不变，被删位置变为undefined。非彻底删除

<<<<<<<< 0524

#  如何打开一个JSON文件 - 为JS所用？  >>> JSON.stringify(value[, replacer [, space]])  >>  将一个JS值[对象/数组]转化为JSON字符串：
① value 待转值
② replacer "瑞浦雷射"：若为函数.待转值每个属性经由其处理、若为数组.待转值包含在改数组中的属性才能被序列化、若无\null.所有属性被序列化
③ space 空格：pretty~

#  截取子数组：.slice(start,end)

<<<<<<<< 0430

#  在JS中读取JSON：let jsonObj = require("./xx/yy.json")  >>  直接引入
**  jsonObj.aaa/bbb/ccc 读取JSON中的属性


<<<<<<<< pre 0420

#  关于call apply：
    B.apply(A, arguments);  A对象调用B方法，把arguments[参数数组]作为参数 【A是对象，B是方法，参数是数组】
    B.call(A, args1,args2); A对象调用B方法，依次把args1\args2\...作为参数 【A是对象，B是方法，参数依次传入】

#  关闭窗口 window.close() [ 打开：window.open('xxxx.html?aaaa=bbbb&cccc=dddd') ]

#  .unescape(str), 对通过escape()编码的字符串进行解码 [返回：str被解码的副本]

#  ** 超出部分"..."：str.substr(0,20)+"..."

#  Array slice(n,m)方法：①截取子数组 ②n必须m可省 ③nm含头不含尾

#  argvs.slice(1)[0],解析：（slice是返回【子数组】）
     slice(n,m)用于从数组中返回选定元素组成的数组[含头不含尾、只有n:从n起至尾]

#  .match(str/reg), ①字符串内检索指定值[参数:str]/②找到1个/多个正则匹配[参数:reg]

#  方法.apply(执行方法的对象, ArrArg)
   方法.call(执行方法的对象, arg1, arg2, ...)
     ** 使用构造函数原始方法 正确写法：Array.apply(null, btns).forEach(function(item){xxx})

#  转base64（canvas.todataURL法），步骤：
  ① 创建canvas  >>  var canvas=document.createElement("canvas")
  ② 设置canvas宽高（不设置.将使用默认）
  ③ 生成ctx  >>  var ctx=canvas.getContext("2d")
  ④ 作画  >>  ctx.drawImage(img,0,0,w,h) >>> img是图对象, 0.0表示"左.上.顶端起", 宽高.不写无所谓
     （作画完成后，ctx就没用了 >> canvas）
  ⑤ 生成base64 >> var b64=canvas.toDataURL("image/xxx")
     （最后的xxx是"扩展名"，可通过：img.src.substring(img.src.lastIndexOf(".")+1).toLowerCase()）
      -------
   以上步骤需要写在图片对象.onload函数之内，其外层：
   A  var img=new Image(); //创建一个空的Image对象( 脱离于DOM )
   B  img.src=url;   //这个url就是 我材料图片的那个url
   C  img.onload=function(){ 这里放：①-⑤ }  //需要等img onload了、才可进行canvas系
 【img-url跨域？】当然啦!! 自己起一个服务（nginx）/或者其他服务器 吧。

#  arguments.callee，用于递归.本函数名。
    函数内，arguments为内部对象.包含传入函数的所有参数。argument.callee代表函数名[!!就这么规定的..]。
      **  作用、消除紧耦合

#  .lastIndexOf("xxx"), 从后往前寻找指定字符串(找到第一个后、返回index、终止)

#  JS.移动端 开发的一些体会：
  ① JS在PC/Mobile都能跑，浏览器调试Mobile时、切换成"移动端"。即可。
  ② 使用xxx.addEventListener("touchstart"/"touchend",function(){})可监听"长按"
     **  其中touchstart/touchend是[ 按下-松开 ]的两个事件
     **  在监听回调中、第一行都会event.preventDefault();>>待了解【】
     **  如需对被监听对象操作，可event.target.xxx、比如event.target.innerHTML="yyy"

#  DOM.appendChild() >> JS原生的DOM操作：贴!   （注意和 JQ的append 区别!!）

#  window.location.replace(xxx)/.href=xxx 的区别：
  ①window.location.replace("uuu"), A->B->【C】、B-C段用replace、【回退】、退回A
  ②window.location.href=uuu, A->B->【C】、B-C段用href、【回退】、退回B

#  JS 同步、异步、单线程 related
    setTimeout和setInterval，可以改变JS执行顺序。它们通常在执行完所有JS代码后才执行。
    >>  即使没有设置超时值(setTimeout 值为0、1-2-setTimeout3-4-5)，也不能保证输出为"12345".
  ------
    JS的异步：①setTimeout/setInterval ②ajax
  ------
    JS是单线程的, 所以处理任务时产生"任务队列"概念。为解决队列中某些任务等待过久(比如IO[网络])、产生"同步"、"异步"：
    将需要等待的任务暂时挂起、处理其他任务 >> 待挂起任务得到反应[可以继续处理]时、再继续，叫"异步操作"。
    按任务队列顺序执行，叫"同步操作"。
    （执行栈[同步任务集中]、任务队列[异步任务回调结果.结果]。执行栈处理完，再来处理任务队列）

#  【ES6】Promise直用(.reje/reso)：返回一个新的Promise实例、其状态为[reje/reso]
const p = Promise.reject(xxx)
const p = Promise.resolve(yyy)
（后续： p.then() >> 作reje/reso处理）

#  try/catch >> 用来定义/处置异常；throw eeee >> 用来抛出异常

#  export default >>>> export一个名为default的变量，import时.可以随意为此输出取名。
（Vue中经常看到、但它是ES6语法）
注意两种用法的对应：
① export default xxxx >> import iiii from "uuuu" >>> 用了default.匿名输出1个!
② export xxxx  >>  import {iiii} from "uuuu"    >>> 普通export.引入(import)时用{}接

#  JS 数组遍历.对象遍历
===========
JS 数组遍历：
① 普通for循环      >> for(let i=0; i<arr.length; i++) {...}
② 优化for循环      >> for(let i=0, len=arr.length; i<len; i++) {...} 《 存下数组长度.避免重复获取
③ forEach[ES5+]    >> arr.forEach(function(v, i){...})  《 v-value-值, i-index-索引(0+) 《 其性能比for弱
   （forEach缺陷： 不能 break[终止循环]，不能 return[终止函数]）
④ map遍历[ES5+]    >> arr.map(function(v, i){...})  《 v-value-值, i-index-索引(0+)
   （forEach、map 都是ES5+语法，IE9- 不能用）
⑤ for-of遍历[ES6+] >> for(let i of arr){...} 《 i-index-索引(0+), 支持数组、字符串遍历
   （for-of 支持: continue, break, return）
****
JS 对象遍历：
① for-in遍历       >> for(var index in obj){...} 《 用于"遍历对象"，不适用于"遍历数组"(遍历出的index为字符串)

# switch语句，勿忘"break;"、不然.语句执行完本case会继续下一个case
switch(n)
{
case 1:
  执行代码块 1
  break;
case 2:
  执行代码块 2
  break;
default:
  n 与 case 1 和 case 2 不同时执行的代码
}
☆单行case语句：case:{xxxxx;xxx;xx;x;break;}

# JS字符串截取:
substring(startIndex[, endIndex])  >>>> 截取start-end之间的字符返回新的字符串 << !!不支持"负数索引"(-n皆为0)
substring(startIndex[, length])  >>>> 截取自start起length个字符返回新的字符串 << !!不支持"负数索引"(-n皆为0)
slice(startIndex[, endIndex])  >>>> 截取start(含)-end(不含)之间的字符返回新的字符串【支持"负数索引"】