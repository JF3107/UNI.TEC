


VUE认知+：
****************************************************************
<<<<<<<< 





<<<<<<<<  0810

#  如果v-for遍历一个数字：
 - **  v-for="(item, index) in 2" 结果-> ①item.无视，②index[ 0 - 1 - 2 ]

<<<<<<<<  0802

#  npm run dev跑起VUE，[ 需要一个服务器/容器运行的 - 指令行里local/network就是 ][自.理解]
 ** 而这里的local 指向 network, 所以为主的，还是network。NBC - network：

<<<<<<<<  0726

#  VUE-iview系tab嵌套使用发生[ “内tab标签”污染“外tab标签” ]：
  -  请在tab级 添加属性name="xxxxx-xxx"
  -  请在tab-pane级 添加属性tab="xxxxx-xxx"（同tab层的"name属性"）

#  IVIEW-TAB隐藏render函数，“你想拥有DOM结构的[标签label]么?”
 ##  (h) => {
 ##    return h('div', [
 ##      h('span', 'AAAA'),
 ##      h('div', 'BBBB')
 ##    ])
 ##  };

<<<<<<<<  0720

#  报错：[ Duplicate keys detected: '0/1/2/...'. This may cause an update error ]，情况、解决办法：
  - 情况：连着写了两个以上的v-for，都是index（你改成idx也没用）
  - 解决：将其中的一个index改成  》 :key="'xxx-'+index"

#  v-for对[ 数组 ]、[ 对象 ]：
  - ① 数组：v-for="(item, index) in Arr" （Arr的v-for中，item即value、index即key[省去'key'项]）
  - ② 对象：v-for="(value, key, index) in Obj"

<<<<<<<<  0706

#  vue组件文件中，<style>标签的scoped、是用来限制本样式表中样式、不污染外部。但如果要在父组件里修改子组件样式，请去除"scoped"

<<<<<<<<  0628

#  computed中的"计算属性"：若其中的组成变量发生改变，则重新计算新的"计算属性"并存于缓存中。等待下一次组成变量改变...

#  v-model/value：在表单[input系]中用v-model，其他元素.只能用value

<<<<<<<<  0614

#  引入i18n模块：
①npm install vue-i18n
②在src中（仿写新网站）建i18n文件夹(内：indexjs \ zh.json \ en.json \ ...)
③main.js中将i18n注入实例
④运用时：{{ $t("xxx") }}，作为模板。$t是运用标志、xxx是.json中的属性名

#  导出 & 导入：
①导出-导入模块 >> export default mmmm -> import mxmx from '..xx..mmmm' >> mxmx命名模块 - mmmm模块名
②export default -> import mxmx from '..xx..mmmm'；另外export -> import { mxmx } from '..xx..mmmm'；
( 需要加 {} )
①导出-导入方法 >> export ffff ( 在mmmm模块中 ) -> import { ffff } from '..xx..mmmm'

#  如何在vue-router中运用vue-i18n?：
①vue-router中直接调用 $t('xxx')只会一次渲染、无法"随意切换"
② 步骤一：将router干区/子区中加入title: 'xxx'
③ 步骤二：将el-menu( 导航区 )中的{{ item.name }}、改成{{ $t('item.title') }}，即可。

<<<<<<<<  0531

#  vue中父/子组件调用子/父组件的方法：
  ☆  父调子 ---- （先，子组件上 定义ref >> ref="zizujian"）
    this.$refs.zizujian.方法/属性
  ☆  子调父 ----
    this.$parent.方法/属性

<<<<<<<<  0524

#  所有DOM，都可以加 @click、对应方法写在methods里，都是有效的

#  如果想要往组件里传递数组（组件中接应数组变量data初始化[ ]），赋值必须在created中进行!!（在mounted中进行会导致数组显示初始化值）

<<<<<<<<  0517

【vue+】
#  插槽：
①运用时，在[组件标签]内填写的%内容%；
②定义时、写在[组件]内的<slot></slot>；
③运用时，%内容% - 替换 - <slot></slot>
----
具名插槽：<template v-slot="ooxx"><XXXX></template> + <div><slot name="ooxx"><slot></div> = <div><XXXX></div>
（注意：这里<slot>中没有name、那就是name="default"，与：未指定v-slot的template契合!!）
（★：以上对“插槽”的定义、混合了 V2.6前+V2.6后）
☆：https://www.cnblogs.com/chinabin1993/p/9115396.html，这一波过后、请继续!!

#  vue类名-A：["class1", { ["class2", "class3"]: boolean }]  >>>>  vue支持用[ ]盛放类名，{ c:b }-c是类名(可以是数组).b是是否生效flag

#  vue类名-B：[  ]形式的"类名容器"，

#  vue，漏点推进  #########
methods >>>> "methods"将被混入vue实例中、直接通过vm实例访问这些方法，方法中的this自动绑定为Vue实例。
computed >>>> "计算属性"将被混入vue实例中、计算属性中的this自动绑定为Vue实例。计算属性的结果会被缓存。
props >>>> "props"可以是数组\对象，用于接收来自父组件的数据。
v-model >>>> 指令 v-model，在表单控件（如下: <input>\<select>\<textarea>）或者组件（如下: ...就是组件啦!）上创建双向绑定。
vuex和state >>>> vuex是VUE全家桶四件套之一（【vuex状态管理】.vueRouter路由.vueResource"HTTP"请求.vueCli项目构建工具），state是其核心概念
created >>>> vue生命周期钩子函数（beforeCreate.【created】.beforeMount.mounted.beforeUpdate.updated.
                            activated.deactivated.beforeDestroy.destroyed.errorCaptured）之一。在实例创建完成后被立即调用。
                     （【warning】不能用"箭头函数"定义[ 生命周期方法 ]）
slot >>>> 插槽。运用组件时<CCC>xxx</CCC>、组件代码<aaa>bbb<slot></slot></aaa>，尔后，"xxx"会插入\取代<slot>的位置。
$refs >>>> ref，被用来给元素或子组件注册引用信息。this.$refs.xxx，访问当前组件环境中、已注册引用信息的元素\子组件。
$parent >>>> this.$parent，访问当前实例的"父实例"（如果有的话）
（!!!嘿：请在API文档 快速\高效 定位答案：https://cn.vuejs.org/v2/api/）

<<<<<<<<  0510

#  <router-view></router-view>，标准写法

#  <vue-markdown>{{这里填入md-data}}</vue-markdown> （先：需要npm install vue-markdown）

#  vue事件, .prevent：vue事件修饰符、阻止默认事件（比如submit按钮会自己提交、须阻止）

#  vue事件, .once：vue事件修饰符、只执行一次

#  mixins引入，在组件的mixins:[]数组中添加，则可以用 this.xxx 直接使用（xxx就是mixins的方法）

#  provider/inject - 提供/注入：在父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。

#  this.$emit('eee', vvv);  >>  vue官方回调、发出eee事件\携带vvv参数（非必要[-]，无影响[代码正常通过，需要时在组件标签@eee="xxx"即可]）