

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1211+ ，
========================================================================================








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1210B ，处理边界情况
========================================================================================

##  访问元素/组件
① 访问根实例：this.$root.xxx << xxx可以是:组件数据(data)/计算属性/组件方法，同时.可以写入[<<=vvv]/调用[xxx()]
② 访问父组件实例：this.$parent.xxx
③ 访问子组件/子元素：this.$refs.xxx << 目标组件/元素上需要ref="xxx"。$refs只会在渲染完成之后生效->避免在[模板][计算属性]里用
④ 依赖注入：采用实例选项 provide[祖先组件]、inject[后代组件]，实现跨组件传递/调用（!!注意.其缺点）。示例如下：
    provide: function(){ // #### 祖先组件
      return: {
        fff: this.fff  //this.fff是"祖先组件"中需要暴露给子代组件使用的方法
      }
    }
   --------------------
    inject: ["fff"]      // #### 后代组件

##  程序化的事件侦听器
>>>> $on( eventName[事件名], eventHandle[事件处理函数] )
>>>> $once( eventName[事件名], eventHandle[事件处理函数] )
>>>> $off( eventName[事件名], eventHandle[事件处理函数] )

##  循环引用
1 - 递归组件：组件可以在自己模板中调用自己.（可能导致无限循环!!）
2 - 循环引用：利用"模块系统( webpack/Browserify )"依赖/导入组件、发生 "template or render function not defined."
（因为"模块系统"需要A时、发现有A依赖于B依赖于A依赖于B依赖于A...，解决办法如下）
[!!!  需要在A、B两个模块中选择一个"定点"，假设选择A作为定点   >>详细代码、见《VUE官程》]
① A作为"定点"、让B在 生命周期钩子beforeCreate时再注册：
② A作为"定点"、在本地注册组件时、使用 webpack异步 import B

##  模板定义的替代品
① 内联模板：子组件使用inline-template属性后、其内部的内容将成为模板，如下：（BUT,不能作为"最佳实践"）
<com-po inline-template>
  <div>  
    <p>XXXX</p>
  </div>
</com-po>
② X-Template：写在<script>里、在Vue.component时引用，如下：
  ---（第一部分）---              <<  写在script里、带上x-template的type、带上id
    <script type="text/x-template" id="com-po-template">
      <p>nnnnnnnn</p>
    </script>
  ---（第二部分）---              <<  com-po声明中template引用上述id
    Vue.component("com-po", {
      template: "#com-po-template"
    })

##  控制更新
① 强制更新：$forceUpdate.  （先：你错了没有?）
② 只渲染一次：在模板-根元素上用 v-once特性。 （尽量少用!）



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1210A ，
========================================================================================
【动态组件】
##  用<component v-bind:is="swiiiich"..>，简述如下：
  ① 组件标签用<component>
  ② is属性.以接纳"计算属性"swiiiich
  ③ 计算属性swiiiich实际是一个"动态返回:组件名"
##  用<keep-alive>包裹动态组件、能达到"缓存"目的。>> 保持了组件原本的状态

【异步组件】
普通定义组件的方式： Vue.component("nnnn", {})
用工厂函数定义组件： Vue.component("nnnn", function(resolve, reject){}) << resolve加载成功时执行[并在里面写template:<>]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1207 ，
========================================================================================

【插槽】
##  概念：组件标签当中这条"缝"，叫[插槽]。在组件模板中用<slot>来引用插槽
<com-po> xxxxxxx <com-po>   <<< "xxxxxxx"就是插槽内容
模板中：<a xxx> <slot></slot> </a>  <<< 这里的<slot>就是插槽的"出口"
"缝"里可塞：
① 普通.字符串
② html(标签)
③ (子)组件-标签
（如果没有<slot>，则"缝"里的一切都无效）


##  具名插槽：插槽区.[template/普通]标签的slot属性 => 模板区.[slot]标签的name属性）
-----（组件-插槽 区）-----
<com-po>
  <template slot="aaa">       <<< 插槽区，利用<template>标签.命名
    <h1>XXXX<h1>
  </template>
  <h6 slot="bbb">YYYY</h6>    <<< 插槽区，直接在标签上.命名
  <p>ZZZZ<p>                  <<< 插槽区，未命名的、若"模板区"有<slot></slot>，则作为"默认插槽"
<com-po>
-----（模板区）-----
<div>
  <slot name="aaa"></slot>    <<< 具名插槽 名为：aaa
  <slot name="bbb"></slot>    <<< 具名插槽 名为：bbb
  <slot></slot>               <<< 默认插槽，无名
<div>
-----（=> 生成结果）-----
<div>
  <h1>XXXX</h1>
  <h6>YYYY</h6>
  <p>ZZZZ<p>
<div>


##  插槽默认内容：（目测仅限"字符串"）在<slot>标签中先写上默认值，如果插槽内有其他值、则会覆盖：
<slot>默认值</slot>


##  编译作用域：
插槽的作用域同"模板"，组件标签(父级) [以下].


##  作用域插槽：使组件带有一个【能从子组件获取数据】的 (可复用) 插槽
（例子，需求 ...）
① 模板区 用<slot></slot>包裹需要"个性化"的内容(这里暂定为"字符串")、!!被包裹的.其实就是"默认值" 
② 将需要上传的值（这里是"todo"），绑成<slot>标签的属性, 如下：
      <slot v-bind:todo="todo"> {{ todo.xxx }} </slot>
③ 组件区 用<template>搭配slot-scope属性（该属性负责从子组件获取数据）、包裹"插槽"，
  属性slot-scope的值，是包络模板区<slot>属性的对象，"插槽"运用slot-scope值进行"个性化"渲染...如下：
      <com-po>
        <template slot-scope="xxxx">
          <eeee.. (这里可以随意运用"xxxx") .e>
        </template>
      <com-po>
!!! 注意：slot-scope（在2.5.0+版本后）不再限制在<template>上使用，请随意用





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1206 ，
========================================================================================

【自定义事件】

##  事件名：kebab-case（嗨粉[hyphen]命名）

##  自定义组件的v-model：
  **  v-model默认利用 名为value的prop[属性]、名为input的event[事件] <<<  针对input作为输入框的情况
         （若对于 checkbox复选、radio单选，需要手动设置model利用对象: prop/event）
  **  Vue.component("ccc", {中}), 有model分别对prop和event进行设置。

##  将原生事件绑定到组件：
  **  方法1：v-on:xxx.native  <<< 在一个组件的根元素直接监听一个原生事件
         （"方法1"只是部分有效、对于类似【<input>包裹在<label>中】的元素时.. 会失效）
  **  方法2：v-on="$listeners" <<< $listeners包含了作用在[ 这个组件 ]上所有的监听器
  **  方法2B：在组件构造中加入一个计算属性-"inputListeners"  >>> 代码如下：
     #  computed: {
     #    inputListeners: function () {
     #      var vm = this
     #      // "Object.assign" 将所有的对象合并为一个新对象
     #      return Object.assign({},
     #        // 我们从父级添加所有的监听器
     #        this.$listeners,
     #        // 然后我们添加自定义监听器，或重写一些监听器的行为
     #        {
     #          input: function (event) {
     #            vm.$emit('input', event.target.value)
     #          }
     #        }
     #      )
     #    }
     #  }

##  .sync 修饰符：









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1122 ，
========================================================================================



模块系统

## 在模块系统（比如：Babel/Webpack的模块系统）中局部注册
建议创建一个"组件目录" >> 也就是components(文件夹)

## 基础组件（比如：按钮、输入框...）的自动化全局注册
（前提：使用webpack、VUE_CLI[内置webpack]）
用：require.context(①组件目录相对路径，②是否查询子目录，③文件名正则)，
例如：const requireComponent = require.context("./components",false,/Base[A-Z]\w+\.(vue|js)$/)
【后续处理（过程），完全不理解】

===============
【<<<<<<<<########%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%########>>>>>>>>】

Prop

## prop大小写
驼峰（JS）->短横小写（DOM）

## prop类型【prop可以是任何类型】
字符串数组形式：["xxxx",]
对象形式：
props：{ //prop类型：String、Number、Boolean、Array、Object
  xxxx：String
}

## 传递静态/动态prop
（静：title，动：v-bind:title[绑定]）
传数字：用"绑定"方式传 >> v-bind:xxx="1",这时传的是1、不是"1"
传布尔：用"绑定"方式传（同上）。另外，若只写不传、默认为true
传数组/对象：用"绑定"方式传（同上）
**传一个对象（比如 obj:{x:x,y:y}）全部属性[而不传这个对象]：用v-bind="obj"!!
>>>> 以上操作，直接把x、y绑定成独立prop

## 父-子prop.单向数据流
因此不要在子组件中擅改prop。可以：①以data用之 ②以computed算之

## prop验证
props（对象形式）对象的值（"键"即为prop名）、担当验证功能，如下：
①String, 单类型
②[String,Number]，多个可能的类型
③{type:String, default:"yo"}，类型+默认值
④{type:String, default:function(){return {msg:"yo"}}}，类型+默认(工厂函数获取)
⑤{validator:function(val){return xxx}}，自定义
** type=>原生构造函数：String,Number,Boolean,Array,Object,Data,Function,Symbol
** type=>还可以是一个自定义构造函数 Xxxx（前提：这个构造函数已经定义..）>>>>p1:Xxxx, 来验证p1是否是通过new Xxxx来创建

## 非prop的特性
①未知特性(属性)[且并没有在组件逻辑中定义]，会一并被添加到组件实例上。
②替换/合并已有的特性：
除class、style（合并）外，其他的属性值.冲突时>>都是替代[覆盖]。
③禁用特性继承：inheritAttrs: false （就这道这点，后面的..不知道）




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>>  1120 ，
========================================================================================

【深入-组件注册】：

组件名：全小写 + 至少1个"-" （kebab-case）

全局注册：形如 Vue.component("xxx-yyy", {zzz}), 注册之后可以用在任何新创建的Vue根实例(new Vue)的模板中.

局部注册：用一个JS对象来定义组件，然后在new Vue()的components选项中定义想要使用的组件，如下：
  var CompoA = {...JS对象...}
  var CompoB = {...JS对象...}
  var CompoC = {...JS对象...}
  new Vue({
    el: "#app",
    components: {
      "compo-a": CompoA,
      "compo-b": CompoB
    }
  })

（局部注册的组件在其自组件中不可用，）如果希望compoA在compoB中可用，可以如下：
写法①：（普通）
  var CompoA = {...JS对象...}
  var CompoB = {
    components: {
      "compo-a": CompoA,
    },
    // ....
  }
写法②：（通过Babel/Webpack使用ES2015+模块）
  import CompoA from "./CompoA.vue"
  export default {
    components: {
      CompoA
    },
    // ....
  }


【1120， “模块系统”前】




（以上部分，将开始 "深入"  >> ）
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pre 1120，VUE基础-组件
========================================================================================

Vue.component("组件名",  { ... })    ......... 定义组件
<div id="xxx">                       ......... DOM定位Vue根节点(实例)
  <组件名></组件名>
</div>
new Vue({el: "xxx"， ...})           ......... Vue 实例化
----------------------------
！注意： 组件可复用。
new Vue 中的data是个对象
组件定义中的data是个函数（带 return - 返回各data属性）


组件：可以复用的Vue实例
（new Vue创建的 [ el: "#xx" ] ，叫做 “根实例”）
**  Vue.component里的data，是一个function、并需要return（对象）！


组件必须先注册、才能被Vue识别。注册类型有：
全局注册、局部注册
Vue.component("compoNAME", {...})叫"全局注册"。全局、根实例下-全部可用


props，以数组形式聚集组件标签上所有的"属性"
(包括, 以v-for render的组件集[通常 以v-bind绑定属性])


每个组件必须只有一个根元素。(写组件模板时注意)


通过事件 向父级组件发送消息：
子级元素用 $emit()  >>  例如@click="$emit('eeee')"  >> 向上发送
父级组件用 监听事件 >>  例如@eeee="FUNCTION.."      >> 接收事件
----
使用事件抛出一个值：
自级元素抛出： $emit('事件名', 携带参数)
父级组件接收： 监听式内 》 用$event接收；方法.函数体内 》 作为参数接收


以下双式等价：
<input v-model="searchText" />
<input v-bind:value="searchText"
       v-on:input="searchText=$event.target.value" />
----
对一个组件用v-model：
<compo v-model="test"></compo>
那么组件props这样写：
props: ["value"]
那么组件template(含input)这样写：
<input v-bind:value="value"
       v-on:input="$emit('input', $event.target.value)"/>


插槽。<slot></slot>







