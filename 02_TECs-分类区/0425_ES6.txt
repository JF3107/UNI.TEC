

ECMAScript 2015+（ES6）：
****************************************************************
<<<<<<<< 



<<<<<<<< 0830

#  如果发生VUE组件复用的情况，首先应该考虑的是去【浅拷贝】：
 - * ：{...原Obj}
 - * ：[...原Arr]
 - * ：Object.assign({}/[], 原Obj/Arr)
#  如果需要【深拷贝】：
 - * ：JSON.parse(JSON.stringify(xxxxx));
 >>  浅拷贝：拷贝1层obj； 深拷贝：拷贝全层obj

<<<<<<<< 0823

#  快捷地、对数组去重：[...new Set(arr)] - 其中arr是待去重(原)数组

#  关于filter：
 * - let xrr = arr.filter(item=>{...})中，xrr是结果数列、arr是原数列
 * - filter.returnTrue的item会加入到xrr中、原数列arr不变
 * - 如果要直接改在原数列上，应：arr = arr.filter

<<<<<<<< 0621

#  filter的使用：
  let arrNew = arr.filter(item=>{ xxxx })   
  -  item参数、xxxx函数内容；
  -  最后返回Boolean。true推入arrNew、false拒绝
  -  arrNew新出、arr维持不变

<<<<<<<< 0531

#  如有关于"forEach\map\filter\..."的疑惑，请参考: https://blog.csdn.net/shilu89757/article/details/42741227

<<<<<<<< 0517

#  `${aaa}`  >>>>  字符串.插值：aaa是做插入的变量[String]。
   运用：console.log(`autocomplete/test，input监听： ${item} `);

<<<<<<<< 0425

“...”是 ES6.扩展运算符：
*********************************************
* 功能：将一个数组转为用逗号分隔的参数序列
* 用法：
① 将一个数组转为用逗号分隔的参数序列，例 ...
② 代替apply方法，例：Math.max.apply(this, [654, 233, 727]) 等于 Math.max(...[654, 233, 727]) 亦即M.m(6,2,7)*
③ 用push将一个数组加至另一个数组的尾部，例：arr1.push(...arr2)
④ 形成\合并数组，例：[...arr]  \  [...arr1, ...arr2, ...arr3]
⑤ 转换“伪数组”成“真数组”，例：[...nisemono_arr] （注意：[...arr]还能用于对数组arr进行“去重”）
⑥ 将字符串转为数组，例：[...'hello']
（⑦，map结构 ... 省略 >> 有兴趣自行了解↓）
资料地址：https://www.cnblogs.com/rlann/p/7222150.html
===========================
** 扩展运算符在对象中的运用：
--------
扩展运算符-对象中运用1 >> 展开符     ...ori：
const ori = {a:1, b:2}
const copy = {...ori, c:3} // copy=>{a:1, b:2, c:3}
----
扩展运算符-对象中运用2 >> 剩余操作符：
(接上"展开符"例)  [ 下例用到了 "解构" ]
const {a, ...rms} = copy // rms=>{b:2, c:3}