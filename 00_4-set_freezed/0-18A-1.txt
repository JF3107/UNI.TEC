






==========（浏览器跨域）===============================

跨域问题，是由浏览器“同源策略”造成的。
 
缺少“浏览器‘同源策略’”，会造成 XSS、CSRF 攻击
 
XSS（Cross-Site Script Attack）跨站脚本攻击
CSRF（Cross-Site Request Forgery）跨站请求伪造
----------------------
跨域问题：浏览器受到“同源策略”限制，当前域名的js只能读取【同域】下的窗口[ 顶层/全局 ]属性
同源策略：不同的域名、不同的协议、不同的端口（三不同）不允许共享资源，保障浏览器安全。
解决“跨域”方法：①jsonp跨域方法  ②window.name方法  ③window.postMessage  ④document.domain  
>> jsonp方法：（jsonp是一种跨域通信手段）
  原理：
    ① 首先利用script标签的src属性实现跨域
    ② 通过将前端的方法作为参数传递给服务器端、然后由服务器端注入参数之后再返回，实现服务器端向客户端的通信
    ③ （由于使用script标签的src属性，因此只姿磁get方法）
  实现：
    ① 设定一个script标签:
     <script src="http://www.a.com/jsonp.js?callback=xxx"></script>
    ② （涉及到后台语言/php知识，...）callback定义了一个函数名，而远程服务器通过调用指定的函数并传入参数来实现传递参数，将fn(response)传递回客户端
    ③ 客户端接收到返回的js脚本，开始解析和执行 fn(response)
>> window.name方法：（window对象name属性，当window的location变化-重新加载后，仍保持不变。）[ 适用于A页面中用iframe加载B页面 ]
  所以，A页面中用iframe加载B页面，页面B中用js把需要传递的数据赋值给window.name，
    加载之后、A修改iframe地址变为同域的一个地址，window.name得以保留（<<< 尚未验证）
>> window.postMessage方法：（H5的新方法）
>> document.domain方法：（修改document的domain属性，我们可以在域/子域or子域/子域之间通信[ “同源”认为它们隶属于不同的域 ]）
  父窗口/子窗口、都通过<script>改 document.domain = "xx.com" 、统一域名。
----------------------
参考（总结）：http://www.jb51.net/article/113156.htm
参考（更详细）：http://blog.csdn.net/pangliang_csdn/article/details/51085124

==========（构造函数）===============================

构造函数/构造器。
 
 
【定义、核心（2句话）】
JS的构造函数，就是普通函数。
当用new来操作普通函数时、它就被称为：构造函数。
 
 
【四点A】构造函数与普通函数：
构造函数：用new调用/无参数时可省()    this会被绑定到对象实例上    不必return（默认返回this指向创建的实例）    首字母大写 
普通函数：不用new/必须有()         this属于此函数调用者       要写return（不写则返回undefined）       首字母小写+驼峰
 
 
【四点B】再强调一遍，构造函数特点：（4点）
①用new调用
②用this（指向将创建的实例）
③默认不用return（有return，参见下面“有return情况”）
④建议首字母大写
 
 
构造函数有return的情况：
①return后面是“基本类型（undefined、null、string、number、boolean）”，忽略之、仍返回this
②return后面是“对象类型”，则返回这个对象！
 
 
【关注点，new】
>> 使用new关键字实例化过程：（mmm实例，MMM构函）
第一步：  创建一个空对象。var mmm = {}   【创建对象】
第二步：  将构造函数MMM 中的this指向新对象mmm   【指1，构函 => 实例】
第三步：  将mmm的__proto__属性指向其构造函数原型对象（MMM.prototype）【指2，实例 => 构函】
第四步：  执行MMM中的代码   【执行构函】
 
 
【new，多说一点...】
如果在一个函数前带上new来调用该函数，那么将创建一个隐藏连接到该函数的prototype成员的新对象，同时・this将被绑定到这个对象上。
** 翻译一下，“那么将创建一个指向该函数(此时已经是构造函数)原型对象的新对象、同时该函数中的this绑定到这个新对象上”

==========（作用域链）===============================

【定义】
作用域链：由于函数嵌套，而形成的作用域逐级嵌套的链状关系结构。【作用域的链状关系结构】
...以下演示作用域链的组成：
var glb = 'gloBBBB';//OK，这里是顶层/全局作用域
function A(){//进入函数A
  var  a=1;
  function B(){  //进入函数B（所谓“函数嵌套”）
    var b=2; 
    function C(){.. 还有？ ..}
  }
}
那么，就有：
顶层作用域 -- 函数A的作用域 -- 函数B的作用域  -- ...   << 这就是作用域链。
 
 
JS作用域（-ES5）：全局作用域、函数作用域。
>>（函数作用域内会发生变量提升。ES6-块级作用域内则是TDZ[暂时性死区]）  << 脑子里面过一遍，WHY。
（+ 全局变量的污染：如果在函数作用域中未用var声明变量、恰巧该变量在全局作用域已有定义，即污染）
（+ 自动转全局变量：如果在函数作用域中未用var声明变量、且该变量未在全局作用域定义，则自动转为全局变量）
 
 
一些“不痛不痒说不到点子上的绕口描述”....：
**  JS作用域链：当代码在一个环境中执行时，会创建变量对象的一个作用域链
    用途：保证对执行环境有权访问的所有变量和函数的有序访问。[ << 保证有序访问！]
**  作用域链是由多个作用域组成的
**  函数的参数，也属于“内部作用域（函数作用域）”。函数中的变量来源：参数-内部，内部声明-内部，外部声明-外部。
 
 
 
======================================
进一步深挖方向：  （第二轮+）
A：  http://blog.csdn.net/zpw91/article/details/53821321
B：  http://blog.csdn.net/charlene0824/article/details/52252824

==========（事件）===============================

【关于“事件”】
=========
1.什么是事件？
“困了要睡觉，‘困[事件]’触发了‘睡觉[方法]’”。

2.JS事件 --> Web事件：是用户与浏览器交互过程中、用户发出且浏览器能响应的动作【点击鼠标、移动鼠标、按动键盘...】

3.JS是 事件驱动的：事件不发生、代码不执行，事件是触发代码运行的直接原因


【两句话】
=========
第一句：  事件是 浏览器对用户行为的一个响应。
第二句：  JS与HTML之间的交互是通过“事件”来实现的。


【0级、2级DOM】
=========
0级DOM、又称“DOM0级”
2级DOM、又称“DOM2级”

【关于 DOM 0-1-2】
DOM级别（0、1、2级DOM）
①标准中.并没有"DOM.0级",所谓DOM-0,是IE4 NetScape4最初支持的DHTML标准（其中有""事件模型 => 称为DOM0事件模型）
②DOM1级 1998.10.1成为W3C标准（其中没有"事件模型"）
③DOM2级是在 DOM1级基础上扩充的标准（DOM视图/事件/样式/..）
④DOM3级，则是对DOM2级标准的进一步扩充

【0级DOM <<>> 事件】
=========
0级DOM（①标签内写onclick事件 ②在JS写onclick事件[通常绑定为元素的方法：btn.onclick]）
（↑↑，上面JS‘绑方法’其实是 document.getEBI("xx").onclick = xxx）


【1级DOM <<>> 事件】
=========
（!!!， 1级DOM，没有“事件模型”）


【2级DOM <<>> 事件】
=========
2级DOM（①监听方法[添加事件/移除事件]）
##  addEventListener( "e", func, t/f )   >> 可以为元素添加多个事件处理程序、触发时按照添加顺序依次调用
（↑↑，还有一个attachEvent方法，等价于上面的addEventListener方法）
【但！是！....事件名不一样：addEventListener用"click"、attachEvent用"onclick"】（-/on）
##  removeEventListener( "e", func, t/f )  >> 不能移除匿名添加的函数
**  参数1 "e"：事件名
**  参数2 func：事件处理函数
**  参数3 t/f：（是否在捕获阶段调用..默认false）true-捕获阶段调用、false冒泡阶段调用


【事件、事件流】
=========
事件：-
事件流 >> 流：具有方向的数据
--------------
“当纸上画数个同心圆，手指放在圆心、指的并不是一个圆  而是所有圆。”
“当用户点击按钮时，是按钮最外层的父元素先收到事件并执行、还是具体元素先收到事件并执行？”
[ “事件流”所描述的就是 从页面中接收事件的顺序 ] -- 主语：顺序
因为上述观点，所以事件流也有两种： 事件冒泡（主流/我的chrome也是“冒泡”）、事件捕获。
--------------
事件冒泡  （从下[具体节点]至上[document]）
事件捕获  （从上[document]至下[具体节点]）


【0、2级DOM，不同的事件概念】
=========
在0级DOM，事件冒泡（主流）/事件捕获
在2级DOM，DOM事件流
（不是“事件流”、是“DOM事件流”，2级DOM标准才有!!）
--------------
DOM事件流：（三阶段）[!!! 只有当addEventListener方法的第三个参数（是否'捕获'）设为 true时，才有这完整的三个阶段]（<< 0328 << 此观点保留）
事件捕获阶段 >> 处于目标阶段 >> 事件冒泡阶段
事件（起泡）冒泡阶段可以被阻止的 >> “阻止冒泡”：event(addEL第二个参数-回调函数中的参数e).stopPropagation();

【!!!!!!!!!!!!!!!   待加强! 具体/试验】

==========（AMD.CMD）===============================

【ACMD】
AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。
CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。
 
 
【定义】：
AMD规范（Asynchronous Module Definition），异步模块加载机制。<< 浏览器端，异步，依赖前置
CMD规范（Common Module Definition），“通用”模块加载机制。  << 浏览器端，异步，依赖就近
CommonJS规范，CommonJS规范。                      << 服务器端，同步。
 
 
【AMD CMD CommonJS 简短陈述】：
==============
①CommonJS规范，同步加载。用于NJS。缺点，同步加载不适用于浏览器端
②AMD规范，异步模块加载。RequireJS应用了这一规范。
... AMD >> 先定义所有依赖，然后在加载完成后的回调函数中执行。
③CMD规范，依赖就近的异步模块加载。SeaJS应用了这一规范。
... CMD >> 依赖就近：用的时候再require
--------------
AMD-CMD 相同点：都是 异步模块加载。
AMD-CMD 不同点：对依赖模块的执行时机 处理不同...
>> AMD依赖前置（先定义-加载，然后使用），CMD依赖就近（用的时候加载）
 
 
【YLJJ、YLQZ】
依赖就近：  依赖可以就近书写（CMD宗旨：“越懒越好”...）
依赖前置：  依赖必须一开始就写好
 
 
【阮一峰1：JS模块化编程】
===============
【1】原始写法：
function m1(){xxx}
function m2(){xxx}
...m1、m2组成一个模块，调用 m1()/m2()。 
=> 缺陷：污染全局变量
【2】对象写法：
var module_1 = new Object({_count:0, m1:function(){xxx}, m2:function(){xxx}});
...m1、m2作为module_1对象的方法，调用 module_1.m1()/.m2()
=> 缺陷：暴露所有模块成员、模块内部可以被外部改写。
【3】IIFE写法：
var module_1 = (function(){
  var _count=0;
  var m1=function(){xxx};
  var m2=function(){xxx};
  return {m1:m1, m2:m2}
})();
...module_1是 】】JS模块的基本写法 【【
=> 优点：不暴露私有成员
【4】放大模式：
（涉及拆分、继承(添加新方法)，可使用模块放大模式）
var module_1 = (function(mod){  mod.m3 = function(){xxx}; return mod;  })(module_1);
...这里给module_1增加新方法 m3
【5】宽放大模式：
（如果首次执行传参window.module_1、而window.module_1并不存在（undefined）时，用宽放大模式，给参数设定一个“空对象”）
var module_1 = (function(mod){  mod.m3 = function(){xxx}; return mod;  })(window.module_1 || {});
【6】输入全局变量：
（独立性。模块内尽量不要与外部交互、 >> 应由外部作为参数传入[解耦]）
var module_1 = (function($, YAHOO){...})(jQuery, YAHOO);
 
 
阮一峰2：AMD
================
NodeJS的模块系统，参照CommonJS规范来实现
... CommonJS用require()加载模块，  require('...')  << 它是全局方法，NodeJS的模块系统用的就是这个
---
服务器端用同步加载（synchronous）,模块都在本地磁盘，模块加载时间 就是本地磁盘读取时间。
浏览器端需异步加载（asynchronous）,如用同步：则因模块都在服务器端，模块加载时间 取决于网速快慢，可能耗时漫长。所以，用异步。
---
浏览器端异步加载模块的规范： AMD规范、CMD规范。
** 阮一峰“模块教程”针对：AMD
** AMD也用require()加载模块，>> require([...], callback函数)
** 主要有两个JS库实现了AMD规范，RequireJS、CurlJS
 
 
阮一峰3：RequireJS
================
【RequireJS特点】：
①实现JS文件的异步加载，避免网页失去响应
②管理模块之间的依赖性，便于代码编写维护
 
【RequireJS基本使用】：
** RequireJS通过main.js（主模块）进行加载。
  <script src="js/require.js" data-main="js/main"></script>
** main.js中内容：
  ①require语句：  require(["aaa","bbb","ccc"], function(a,b,c){xxxx})
  ②config语句：  require.config({ path: {"aaa": "aaa.min", "ddd": "lib/ddd"} })
    config中除了path属性、还有baseUrl属性（指定一个路径，比如"js/lib"）、shim属性（用于配置“不兼容模块”）-如下：
    shim属性详细： shim: {"jquery.scroll": {deps: ['jquery'], exports: "jquery.fn.scroll"}}
      deps数组：用来罗列依赖，exports属性(输出变量名)：表明这个模块外部调用时的名称。
** 模块们：（按AMD规范来写）
  [ 比如其中有一个模块是，aaa.js。内容如下 ]
  define(['abc'],function(abc){...var rrr = fun(){}... return {rrr: rrr}})   << []是依赖，没有依赖可以不写-不传参
    调用时：require('aaa', function(a){... a.rrr() ...})              << 就这样用！
---- ---- ----
假设目录结构如下：
js(文件夹)
  aaa.min.js
  bbb.js
  ccc.js
  main.js
  require.js
  lib(文件夹)
    ddd.js

==========（原型.原型链.继承）===============================

【原型和原型链是JS实现继承的一种模型】
【原型    ##   即“原型对象” >> P.prototype】
【原型链   ##   p.__proto__.__proto__.__proto__ == null】
【继承    ##   p.__proto__.__proto__中各层所具有的方法/属性】（实用方面待进一步 “深入理解”）
 
 
【8个点】
1.分清 普通对象、函数对象
2.实例的构造函数属性指向构造函数 => p1.constructor == P
        [  p1、p2是P的实例，每个实例都有一个constructor（构造函数）属性指向P  ]
3.原型对象 P.prototype，原型对象也是P的实例。   其作用是：用于继承
        [ 有关系如是： P.prototype.constructor == P，综上 >> “实例p” 和 “原型对象P.prototype” 都是P的实例 ]
4.__proto__、内置属性，指向构造函数的原型对象（简称 即 原型对象）：p1.__proto__ == P.prototype
5.构造器：Object、Function、Array、Date、Number、String、Boolean（就是创建“包装对象”的那些构造函数）<<叫他们“构造器”
        [ Object叫做：根构造器 ]
6.原型链...（参见“4个‘__proto__’”）
7.函数对象。所有函数对象的__proto__属性都指向Function.prototype(但它是一个空函数)、 constructor属性都指向Function。
  （！！包括根构造函数Object和Function：Object.__proto__ == Function.prototype; Function.__proto__ == Function.prototype）
>> 12个内置构造器/构造函数：Object Function String Number Boolean Array RegExp Error Date Arguments Math（对象形式存在） JSON（对象形式存在）
    （Math/JSON(对象)直接用、无须new， Math.__proto__ == Object.prototype  Math.constructor == Object << 相当于“构造函数原型对象”层级）
8.Prototype：是保存着它们所有实例方法的真正所在。
    p.__proto__ == P.prototype    第一层 >> 指向实例构造函数原型对象，所拥有的方法“原型对象方法”、个性化~
    p.__proto__.__proto__ == Object.prototype  第二层 >> 指向根构造器原型对象，所拥有的方法“基本法”、最基础~
9.终极：
    原型链的形成本质是靠 __proto__、而非prototype。（prototype只是在构造函数层面承担：原型对象/方法）
 
【4个“__proto__”】【梳理完毕，看下面 0908发见】：
实例的__proto__              是 该实例的构造函数的原型对象  ==>  p.__proto__ == P.prototype 
构造函数/构造器的__proto__        是 “函数构造函数”的原型对象  ==>  P.__proto__ == Function.prototype  （包括根构造函数 Object.__proto__）
构造函数/构造器的原型对象的__proto__   是 “根构造函数”的原型对象 ==>  P//Function.prototype.__proto__ == Object.prototype（原型对象在__proto__属性层面不等同于一般“实例”、比如p）
根构造函数的原型对象的__proto__        是null              ==>  Object.prototype.__proto__ == null
（以上 “根构造函数”-Object，“函数构造函数”-Function，“构造函数的原型对象”简称 [ 原型对象 ]）
## 一般实例的__proto__，指向 该实例构造函数原型对象 [ 呵呵，一般实例3个__proto__就指向null了！！ ]
## 构造函数的__proto__，指向 函数构造函数的原型对象 （当然，构造器是一类构造函数）
## 构造函数(的，构造函数的)原型对象的__proto__，指向 根构造函数的原型对象（当然，也包括“函数构造函数”）
## 根构造函数原型对象的__proto__，指向 null

******（0908发见）********
第一部分：
对于：函数对象： Object/Function/P.__proto__.__proto__.__proto__ == null 根构造函数.函数构造函数.普通构造函数/函数
对于：普通对象：                 p.__proto__.__proto__.__proto__ == null (普通)对象/实例
1 Object/Function/P.__proto__ == Function.prototype 第一层（注意①包括Object在内!! ②Function.__proto__ == Function.prototype）
                  p.__proto__ ==        P.prototype 第一层
2 Function.prototype.__proto__ == Object.prototype 第二层
         P.prototype.__proto__ == Object.prototype 第二层
3 Object.prototype.__proto__ ==null      第三层
  Object.prototype.__proto__ ==null      第三层
第二部分：
Object.__prto__  根构造函数   的构造函数.的原型对象
Object.prototype 根构造函数.的原型对象
两者不等!!!  >>  【Object.__prto__ .__proto__  == Object.prototype】
第三部分：
【Object.prototype】的基本方法/属性：
constructor 指向自己(Object)
** toString  返回一个表示该对象的字符串 对象>>[object object] 非对象>>文本值.但不会单纯加""[比如[1,2,3]=>'1,2,3']
** valueOf      返回原始值、没有原始值.返回自身
* hasOwnProperty  用来判断对象是否包含某个属性
* isPrototypeOf   B.prototype.isPrototypeOf(b) 》 Baz存在于baz的原型链上。
toLocaleString   ...

**************************
 
【4个“constructor”】：
** 一般实例的constructor，指向 该实例构造函数
** 构造函数的constructor，指向 函数构造函数（Function）
** 构造函数原型对象的constructor，指向 自己（该构造函数）
** 根构造函数原型对象的constructor，指向 自己（Object）
 
【2个“不得不知”】
A.每个对象都有 __proto__属性，但只有函数对象才有 prototype属性( XXX -- ？？？Function.prototype原型对象是“函数对象”，它除外 )
B.原型对象的类型一般都是普通对象（Object），只有Function的原型对象类型（Function.prototype）是函数对象（Function）
 
【最基础ABCDEF】
##  p1 = new P()
##  p1.constructor == P
##  P.prototype.constructor == P     （构造函数原型对象的构造函数属性，是它自己）
##  p1.__proto__ == P.prototype           （也就是“实例的__proto__属性” >> “构造函数原型对象”）
##  p1.__proto__.__proto__ == Object.prototype  （也就是“构造函数原型对象的__proto__属性” >>“根构造函数原型对象”）
##  p1.__proto__.__proto__.__proto__ == null  （也就是“根构造函数原型对象的__proto__属性” >> null”）
 
 
0207，参考：https://www.jianshu.com/p/dee9f8b14771 系列
------------------------
------------------------
 
 
原型中：原始类型，互相独立 [属性]
原型中：引用类型，共享！（比如：数组index对应）
 
0204，参考：http://www.cnblogs.com/qieguo/p/5451626.html
 

-------（0302+）--------
0327更新：【参照 0908 "双模型" ↑↑】
Function.prototype.__proto__.__proto__ === null
（Object.prototype.__proto__ === null）
证实：Function.prototype.__proto__ === Object.prototype 也就是"Function.prototype的原型对象" 就是 根构造器原型对象
那也就是：Function.prototype的量级、等价于 P.prototype。都是构造函数原型对象！（函数构造函数 VS p的构造函数）
只！是！... P.__proto__ === Function.prototype


==========（闭包）===============================

闭包，定义：
有权访问另一个函数作用域内变量的函数，都是闭包。（主语是：函数、里面那个函数）
 
闭包，进深：（三条）
1  闭包，就是一个引用另外一个函数B变量的函数A（通常这个函数A的位置在B里面）。
2  因为A要引用B的变量，所以B的被A引用的变量不会被回收。
3  因此，可以用来封装一个私有变量。
## 不必要的闭包只会徒增内存消耗。
** 可以理解一下 IIFE 与 闭包 （已经理解了，0204）
 
闭包，示例：
//代码段-1 this.inc是闭包 <<
function a(){
    var n = 0;
    this.inc = function () {
        n++; 
        console.log(n);
    };
}
var c = new a();
c.inc();    //控制台输出1
c.inc();    //控制台输出2
//代码段-2 inc是闭包 <<
function a(){
    var n = 0;
    function inc(){
       n++; 
       console.log(n);
    }
    return inc;
}
var c = a();
c();    //控制台输出1
c();    //控制台输出2

==========（IIFE）===============================

“严格来讲，IIFE并不是闭包（因其不满足函数成为闭包的三个条件）。但一般地，人们认为：IIFE就是闭包”
【1】闭包三条件：
局部变量(函数内定义有共享意义的局部变量) 
内嵌函数(函数内声明内嵌函数，该内嵌函数需访问"局部变量")
外部使用(函数向外返回此内嵌函数，外部可通过此内嵌函数持有/访问声明在函数内的"局部变量")
 
IIFE >> “立即执行函数（Immediately-Invoked Function Expression）”
IIFE作用：ES5中，通过匿名函数 实现“块级作用域”（详见，下面的“功能”）
 
IIFE：
(function(){...<此间是 块级（私有）作用域>...})()
 
IIFE常见：（这里以 “F”代替: function(){....} ）
(F)();   >>  (function Foo(){ console.log("TEST"); })( );  《 “运行括号”写外面
(F());   >>  (function Foo(){ console.log("TEST"); }( ));  《 “运行括号”写里面
 
IIFE是怎么来的：
① 用“函数定义表达式”：
var a = function(){....}  //函数定义表达式 “=”后面本身就是一个“匿名函数”
②A 一般，要让a函数跑起来，随后用： a();
②B a也就是一个容纳此“匿名函数”变量，那，如何不用a也能让这个匿名函数跑起来？
③A function(){....}()  喂！这是不行的（报错~）
③B 应该先用个（）把匿名函数括起来-再调用！，如下：
(function(){....})()
以上，一区外层（） >> 将“匿名函数”转化为“函数表达式”；而“函数表达式”后面能加（）使其执行。
 
IIFE功能：
①  创建块级（私有）作用域。
## XX   IIFE内定义的变量，外面访问不到（外面由于作用域的关系 不可能访问到里面的变量。与“销毁”无关）
##    外面定义的变量，IIFE中能够访问!
②  IIFE中定义的任何变量、函数，都会在执行结束时被销毁。...可以减少闭包占用内存